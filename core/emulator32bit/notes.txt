Simplified ARM-like instruction set
32 bit Instructions
30 General Purpose registers
	- x0, x1, ..., x29
	- SP, XZR, PSTATE
	- FPCR https://developer.arm.com/documentation/100446/0100/aarch64-register-descriptions/fpcr--floating-point-control-register
	- FPSR https://developer.arm.com/documentation/100446/0100/aarch64-register-descriptions/fpsr--floating-point-status-register

INSTRUCTION SET ARCHITECTURE
	- Attempted to make these instruction encodings be as realistic as possible
	(keep specific register encoding locations constant)

O Type Instruction
----------------------------------------------------------------
OP{S} xd, xn, arg
000000 | 0 | 00000 | 00000 | 1 | 00000000000000
opcode	 S    xd      xn   ?imm       imm14
000000 | 0 | 00000 | 00000 | 0 | 00000 | 00 | 00000 | 00
opcode   S    xd      xn   ?imm   xm    shift  imm5   --

O1 Type Instruction
OP xd, xn, [imm5 | xm]
000000 | 0 | 00000 | 00000 | 0 | 00000 | 00 | 00000 | 00
opcode   -     xd      xn  ?imm    xm    --    imm5   --

O2 Type Instruction
OP{S} xlo, xhi, xn, xm
000000 | 0 | 00000 | 00000 | 0 | 00000 | 00000 | 0000
opcode   S    xlo     xhi    -    xn      xm     ----

O3 Type Instruction
OP{S} xd, arg
000000 | 0 | 00000 | 1 | 0000000000000000000
opcode   S    xd   ?imm         imm19

000000 | 0 | 00000 | 0 | 00000 | 0000000000000
opcode   S    xd   ?imm   xn		 imm14


F Type Instruction
----------------------------------------------------------------
OP.F32 xd, xn
000000 | 0 | 00000 | 00000 | 000000000000000
opcode   -    xd      xn     ---------------

F1 Type Instruction
OP.F32 xd, xn, xm
000000 | 0 | 00000 | 00000 | 0 | 00000 | 000000000
opcode   -    xd      xn     -    xm     ---------

F2 Type Instruction
OP.F32 xn, {xm|0}
000000 | 1 | 00000 | 000000000000000000000
opcode ?fimm  xn     fimm, significand = 14, exponent = 7
000000 | 0 | 00000 | 00000 | 0000000000000000
opcode ?fimm  xn      xm     ----------------


M Type Instruction
----------------------------------------------------------------
adr
00: simple/offset
01: preindexed
10: postindexed

000000 | 0 | 00000 | 00000 | 0 | 00000 | 00 | 00000 | 00
opcode ?sign   xt      xn  ?simm  xm    shift  imm5  adr

000000 | 0 | 00000 | 00000 | 1 | 000000000000 | 00
opcode ?sign   xt      xn  ?simm   simm12      adr

M1 Type Instruction (?sign is bit 21 of the simm21, stored in two parts)
000000 | 0 | 00000 | 00000000000000000000
opcode ?sign   xd            imm20


B Type Instruction
----------------------------------------------------------------
B{CD} simm22
BL{CD} simm22
BX{CD} xd
BLX{CD} xd
SWI{CD} -

B1 Type Instruction
000000 | 0000 | 0000000000000000000000
opcode   cond    simm22 (scale by 4)

B2 Type Instruction
000000 | 0000 | 00000 | 00000000000000000
opcode   cond    xd     -----------------

================================================================
Miscellaneous Instructions (1)
000000 | 0000 | 0000000000000000000000
opcode  ext. op         imm22

000000 | 0000: HLT
    - 000000 | 0000 | 0000000000000000000000
	- Stops program execution

000000 | 1111: NOP
	- 000000 | 1111 | 0000000000000000000000
    - Does nothing

000000 | 0001 : MSR
    - 000000 | 0001 | 00000 | 0 | 00000 | 00000000000
                     sysreg  ?imm  xn
    - 000000 | 0001 | 00000 | 1 | 0000000000000000
                     sysreg  ?imm     imm16
    - Move to system register

000000 | 000010: MRS
	- 000000 | 0010 | 00000 | 0 | 00000 | 00000000000
                       xn        sysreg
    - Move from system register

000000 | 0011: TLBI
    - 000000 | 0011 | 00000 | 0 | 0000000000000000
                        xt   ?xt    imm16, specify TLBI operation
    - Flush the TLB, flags to specify how to do so

000000 | 0100: Atomic Operations
    000000 | 0100 | 00000 | 0 | 00000 | 00000 | 00 | 0000
                     xt     -    xn      xm    W/B/H atop
    - SWP{B|H} xt, xn, [xm]
	    - Writes the value at the address xm to xt, storing xn into address xm

    000000 | 0100 | 00000 | 0 | 00000 | 00000 | 00 | 0001
                     xt     -    xn      xm    W/B/H atop
    - LDADD{B|H} xt, xn, [xm]
        - Writes the value at address xm to xt, adding xn into address xm

    000000 | 0100 | 00000 | 0 | 00000 | 00000 | 00 | 0010
                     xt     -    xn      xm    W/B/H atop
    - LDCLR{B|H} xt, xn, [xm]
        - Writes the value at address xm to xt, clearing the bits specified by xn at address xm

    000000 | 0100 | 00000 | 0 | 00000 | 00000 | 00 | 0011
                     xt     -    xn      xm    W/B/H ----
    - LDSET{B|H} xt, xn, [xm]
        - Writes the value at address xm to xt, setting the bits specified by xn at address xm



Arithmetic Instructions (9)
000001: ADD{S} xd, xn, arg (O)
	- adds xn and arg and stores in xd
	- {S} specifies whether the NZCV flags are updated as a result of the operation

000010: SUB{S} xd, xn, arg (O)
	- subtracts arg from xn and stores in xd

000011: RSB{S} xd, xm, arg (O)
	- subtracts xm from arg and stores in xd

000100: ADC{S} xd, xn, arg (O)
	- adds xn and arg with the current state's carry flag and stores in xd

000101: SBC{S} xd, xn, arg (O)
	- subtracts arg from xn with the current state's carrry flag and stores in xd

000110: RSC{S} xd, xm, arg (O)
	- subtracts xm from arg with the current state's carry flag and stores in xd

000111: MUL{S} xd, xn, arg (O)
	- multiplies xn and arg and stores the lower 32 bits in xd

001000: UMULL{S} xlo, xhi, xn, xm (O2)
	- multiplies unsigned xn and xm and stores the result into {xhi, xlo}

001001: SMULL{S} xlo, xhi, xn, xm (O2)
	- multiplies signed xn and xm and stores the result into {xhi, xlo}

Floating Point Instructions (12)
https://developer.arm.com/documentation/dui0802/b/Advanced-SIMD-and-Floating-point-Programming--32-bit-/Floating-point-instructions
001010: VABS.F32 xd, xn (F)
001011: VNEG.F32 xd, xn (F)
001100: VSQRT.F32 xd, xn (F)
001101: VADD.F32 xd, xn, xm (F1)
001110: VSUB.F32 xd, xn, xm (F1)
001111: VDIV.F32 xd, xn, xm (F1)
010000: VMUL.F32 xd, xn, xm (F1)
010001: VCMP.F32 xn, {xm|0} (F1)
010010: VSEL.cond.F32 xd, xn, xm (F1)
010011: VCINT.{u32|s32}.F32 xd, xn (F)
010100: VCFLO.{u32|s32}.F32 xd, xn (F)
010101: VMOV.F32 xd, {xn|#fimm} (F2)

Bitwise Instructions (8)
010110: AND{S} xd, xn, arg (O)
010111: ORR{S} xd, xn, arg (O)
011000: EOR{S} xd, xn, arg (O)
011001: BIC{S} xd, xn, arg (O)
011010: LSL{S} xd, xn, {xm|#imm5} (O1)
011011: LSR{S} xd, xn, {xm|#imm5} (O1)
011100: ASR{S} xd, xn, {xm|#imm5} (O1)
011101: ROR{S} xd, xn, {xm|#imm5} (O1)

Comparison Instructions (4)
011110: CMP xn, arg (O)
011111: CMN xn, arg (O)
100000: TST xn, arg (O)
100001: TEQ xn, arg (O)

Data Movement Instructions (2)
100010: MOV{S} xd, arg (O3)
100011: MVN{S} xd, arg (O3)

Memory Access Instructions (9)
100100: LDR{B|H} xt, mem (M)
	- op: 100100 (Word), 100101 (Byte), 100110 (Half-Word)
100111: STR{B|H} xt, mem (M)
	- op: 100111 (Word), 101000 (Byte), 101001 (Half-Word)

Branching Instructions (5)
101101: B{CD} simm22 (B1)
101110: BL{CD} simm22 (B1)
101111: BX{CD} xd (B2)
	- BX X29 equivalent to ret
110000: BLX{CD} xd (B2)
110001: SWI{CD} - (B1)
	- operation depends on the value of register x8 which gives the syscall identifier
	- operation, if returning anything, writes to x0
	- registers x0 through x5 can be used as arguments

Addressing Instructions (1)
110010: ADRP simm21 (M1)

AVAILABLE OPCODES
	101010, 101011, 101100, 110011, 110100, 110101, 110110, 110111,
	111000, 111001, 111010, 111011, 111100, 111101, 111110, 111111

Condition Codes (15)
AL {1}
EQ {Z=1}
NE {Z=0}
CS, HS {C=1}
CC, LO {C=0}
MI {N=1}
PL {N=0}
VS {V=1}
VC {V=0}
HI {C=1 AND Z=0}
LS {C=0 OR Z=1}
GE {N=V}
LT {N!=V}
GT {Z=0 AND N=V}
LE {Z=1 OR N!=V}

arg: right-hand argument
#imm8
xn
xn, shift

shift: shift register value
00: LSL #imm5
01: LSR #imm5
10: ASR #imm5
11: ROR #imm5

mem: memory address
[reg, #simm12]
[rega, regb]
[rega, regb, shift]
[reg, #simm12]!
[rega, regb]!
[rega, regb, shift]!
[reg], #simm12
[rega], regb
[rega], regb, shift