Simplified ARM-like instruction set
32 bit Instructions
30 General Purpose registers
	- x0, x1, ..., x29
	- SP, XZR, PSTATE
	- FPCR https://developer.arm.com/documentation/100446/0100/aarch64-register-descriptions/fpcr--floating-point-control-register
	- FPSR https://developer.arm.com/documentation/100446/0100/aarch64-register-descriptions/fpsr--floating-point-status-register

INSTRUCTION SET ARCHITECTURE
	- Attempted to make these instruction encodings be as realistic as possible
	(keep specific register encoding locations constant)

O Type Instruction
----------------------------------------------------------------
OP{S} xd, xn, arg
000000 | 0 | 00000 | 00000 | 1 | 00000000000000
opcode	 S    xd      xn   ?imm       imm14
000000 | 0 | 00000 | 00000 | 0 | 00000 | 00 | 00000 | 00
opcode   S    xd      xn   ?imm   xm    shift  imm5   --

O1 Type Instruction
OP xd, xn, [imm5 | xm]
000000 | 0 | 00000 | 00000 | 0 | 00000 | 00 | 00000 | 00
opcode   -     xd      xn  ?imm    xm    --    imm5   --

O2 Type Instruction
OP{S} xlo, xhi, xn, xm
000000 | 0 | 00000 | 00000 | 0 | 00000 | 00000 | 0000
opcode   S    xlo     xhi    -    xn      xm     ----

O3 Type Instruction
OP{S} xd, arg
000000 | 0 | 00000 | 1 | 0000000000000000000
opcode   S    xd   ?imm         imm19

000000 | 0 | 00000 | 0 | 00000 | 0000000000000
opcode   S    xd   ?imm   xn		 imm14


F Type Instruction
----------------------------------------------------------------
OP.F32 xd, xn
000000 | 0 | 00000 | 00000 | 000000000000000
opcode   -    xd      xn     ---------------

F1 Type Instruction
OP.F32 xd, xn, xm
000000 | 0 | 00000 | 00000 | 0 | 00000 | 000000000
opcode   -    xd      xn     -    xm     ---------

F2 Type Instruction
OP.F32 xn, {xm|0}
000000 | 1 | 00000 | 000000000000000000000
opcode ?fimm  xn     fimm, significand = 14, exponent = 7
000000 | 0 | 00000 | 00000 | 0000000000000000
opcode ?fimm  xn      xm     ----------------


M Type Instruction
----------------------------------------------------------------
adr
00: simple/offset
01: preindexed
10: postindexed

000000 | 0 | 00000 | 00000 | 0 | 00000 | 00 | 00000 | 00
opcode ?sign   xt      xn  ?simm  xm    shift  imm5  adr

000000 | 0 | 00000 | 00000 | 1 | 000000000000 | 00
opcode ?sign   xt      xn  ?simm   simm12      adr

M1 Type Instruction
000000 | 0 | 00000 | 00000 | 0 | 00000 | 000000000
opcode   -     xt      xn    -     xm    ---------

M2 Type Instruction
000000 | 0 | 00000 | 00000000000000000000
opcode   -	   xd            imm20


B Type Instruction
----------------------------------------------------------------
B{CD} simm22
BL{CD} simm22
BX{CD} xd
BLX{CD} xd
SWI{CD} -

B1 Type Instruction
000000 | 0000 | 0000000000000000000000
opcode   cond    simm22 (scale by 4)

B2 Type Instruction
000000 | 0000 | 00000 | 00000000000000000
opcode   cond    xd     -----------------

Miscellaneous Instructions (2)
HLT
	- Stops program execution
	- op: 000000

NOP
	- Does nothing
	- op: 111111

Arithmetic Instructions (9)
ADD{S} xd, xn, arg (O)
	- adds xn and arg and stores in xd
	- {S} specifies whether the NZCV flags are updated as a result of the operation
	- op: 000001

SUB{S} xd, xn, arg (O)
	- subtracts arg from xn and stores in xd
	- {S} specifies whether the NZCV flags are updated as a result of the operation
	- op: 000010

RSB{S} xd, xm, arg (O)
	- subtracts xm from arg and stores in xd
	- {S} specifies whether the NZCV flags are updated as a result of the operation
	- op: 000011

ADC{S} xd, xn, arg (O)
	- adds xn and arg with the current state's carry flag and stores in xd
	- {S} specifies whether the NZCV flags are updated as a result of the operation
	- op: 000100

SBC{S} xd, xn, arg (O)
	- subtracts arg from xn with the current state's carrry flag and stores in xd
	- {S} specifies whether the NZCV flags are updated as a result of the operation
	- op: 000101

RSC{S} xd, xm, arg (O)
	- subtracts xm from arg with the current state's carry flag and stores in xd
	- {S} specifies whether the NZCV flags are updated as a result of the operation
	- op: 000110

MUL{S} xd, xn, arg (O)
	- multiplies xn and arg and stores the lower 32 bits in xd
	- {S} specifies whether the NZCV flags are updated as a result of the operation
	- op: 000111

UMULL{S} xlo, xhi, xn, xm (O2)
	- multiplies unsigned xn and xm and stores the result into {xhi, xlo}
	- {S} specifies whether the NZCV flags are updated as a result of the operation
	- op: 001000

SMULL{S} xlo, xhi, xn, xm (O2)
	- multiplies signed xn and xm and stores the result into {xhi, xlo}
	- {S} specifies whether the NZCV flags are updated as a result of the operation
	- op: 001001

Floating Point Instructions (12)
https://developer.arm.com/documentation/dui0802/b/Advanced-SIMD-and-Floating-point-Programming--32-bit-/Floating-point-instructions
VABS.F32 xd, xn (F)
	- op: 001010
VNEG.F32 xd, xn (F)
	- op: 001011
VSQRT.F32 xd, xn (F)
	- op: 001100
VADD.F32 xd, xn, xm (F1)
	- op: 001101
VSUB.F32 xd, xn, xm (F1)
	- op: 001110
VDIV.F32 xd, xn, xm (F1)
	- op: 001111
VMUL.F32 xd, xn, xm (F1)
	- op: 010000
VCMP.F32 xn, {xm|0} (F1)
	- op: 010001
VSEL.cond.F32 xd, xn, xm (F1)
	- op: 010010
VCINT.{u32|s32}.F32 xd, xn (F)
	- op: 010011
VCFLO.{u32|s32}.F32 xd, xn (F)
	- op: 010100
VMOV.F32 xd, {xn|#fimm} (F2)
	- op: 010101

Bitwise Instructions (8)
AND{S} xd, xn, arg (O)
	- op: 010110
ORR{S} xd, xn, arg (O)
	- op: 010111
EOR{S} xd, xn, arg (O)
	- op: 011000
BIC{S} xd, xn, arg (O)
	- op: 011001
LSL{S} xd, xn, {xm|#imm5} (O1)	-- NOTE, #imm5 refers to the same one if ?imm was unset
	- op: 011010
LSR{S} xd, xn, {xm|#imm5} (O1)
	- op: 011011
ASR{S} xd, xn, {xm|#imm5} (O1)
	- op: 011100
ROR{S} xd, xn, {xm|#imm5} (O1)
	- op: 011101

Comparison Instructions (4)
CMP xn, arg (O)
	- op: 011110
CMN xn, arg (O)
	- op: 011111
TST xn, arg (O)
	- op: 100000
TEQ xn, arg (O)
	- op: 100001

Data Movement Instructions (2)
MOV{S} xd, arg (O3)
	- op: 100010
MVN{S} xd, arg (O3)
	- op: 100011

Memory Access Instructions (3)
LDR{S}{B|H} xt, mem (M)		: NOTE {B|H} signify different instruction opcodes
	- op: 100100 (regular), 100101 (Byte), 100110 (Half-Word)
STR{S}{B|H} xt, mem (M)
	- op: 100111 (regular), 101000 (Byte), 101001 (Half-Word)
SWP{S}{B|H} xd, xn, [xm] (M1)
	- op: 101010 (regular), 101011 (Byte), 101100 (Half-Word)

Branching Instructions (5)
B{CD} simm22 (B1)
	- op: 101101
BL{CD} simm22 (B1)
	- op: 101110
BX{CD} xd (B2)
	- BX X29 equivalent to ret
	- op: 101111
BLX{CD} xd (B2)
	- op: 110000
SWI{CD} - (B1)
	- op: 110001
	- operation depends on the value of register x8 which gives the syscall identifier
	- operation, if returning anything, writes to x0
	- registers x0 through x5 can be used as arguments

Addressing Instructions (1)
ADRP imm20 (M2)
	- op: 110010

AVAILABLE OPCODES
	110011, 110100, 110101, 110110, 110111,
	111000, 111001, 111010, 111011, 111100, 111101, 111110

Condition Codes (15)
AL {1}
EQ {Z=1}
NE {Z=0}
CS, HS {C=1}
CC, LO {C=0}
MI {N=1}
PL {N=0}
VS {V=1}
VC {V=0}
HI {C=1 AND Z=0}
LS {C=0 OR Z=1}
GE {N=V}
LT {N!=V}
GT {Z=0 AND N=V}
LE {Z=1 OR N!=V}

arg: right-hand argument
#imm8
xn
xn, shift

shift: shift register value
00: LSL #imm5
01: LSR #imm5
10: ASR #imm5
11: ROR #imm5

mem: memory address
[reg, #simm12]
[rega, regb]
[rega, regb, shift]
[reg, #simm12]!
[rega, regb]!
[rega, regb, shift]!
[reg], #simm12
[rega], regb
[rega], regb, shift