struct pcb {
    pid_t pid;
    struct pagetable *ptable;

    reg_t pc, pstate, x0, x1, x2 .... x29, sp;
}

Process memory layout
each process needs to have information about its memory location (the kernel should store these information)
so things like where the stack begins, very top of the memory block allocated to the process etc

 === High User Address ===
- Stack Bottom
- Command line args and environment variables
- Stack Pointer (stack top)
- Free Space
- Heap Top
- Heap Bottom
- BSS Section
- Data Section
- Text Section
 === Low Address ===


Stack will grow down and heap grows upwards
We will have to use memory mappings to have virtual memory and support dynamically growing heap or stack
without mapping the whole free space


32 bit Virtual memory
Support multi level page tables
Support mapping to variable size physical memory
Each entry in page table needs a dirty flag and disk flag
If page is in disk, OS will need to load the corresponding page from disk (respective to the current process id)

File system


Disk memory
====TODO====
This should be modeled after a real harddisk - split into sectors of 512 bytes.

A single file containing binary data
32 bit memory access
split into chunks and pages (4096 bytes => page, 4096 pages => chunk)
for now, just pages (perhaps different chunks can have different associated disk files)