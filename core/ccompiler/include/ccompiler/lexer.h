#pragma once

typedef struct Token token_t;

typedef struct LexerData
{
    char *src;
    int length;

    token_t *toks;
    int tok_cnt;
    int tok_cap;
} lexer_data_t;

typedef enum TokenType
{
    TOKEN_ERROR = -1,

    TOKEN_KEYWORD_AUTO,
    TOKEN_KEYWORD_BREAK,
    TOKEN_KEYWORD_CASE,
    TOKEN_KEYWORD_CHAR,
    TOKEN_KEYWORD_CONST,
    TOKEN_KEYWORD_CONTINUE,
    TOKEN_KEYWORD_DEFAULT,
    TOKEN_KEYWORD_DO,
    TOKEN_KEYWORD_DOUBLE,
    TOKEN_KEYWORD_ELSE,
    TOKEN_KEYWORD_ENUM,
    TOKEN_KEYWORD_EXTERN,
    TOKEN_KEYWORD_FLOAT,
    TOKEN_KEYWORD_FOR,
    TOKEN_KEYWORD_GOTO,
    TOKEN_KEYWORD_IF,
    TOKEN_KEYWORD_INLINE,
    TOKEN_KEYWORD_INT,
    TOKEN_KEYWORD_LONG,
    TOKEN_KEYWORD_REGISTER,
    TOKEN_KEYWORD_RESTRICT,
    TOKEN_KEYWORD_RETURN,
    TOKEN_KEYWORD_SHORT,
    TOKEN_KEYWORD_SIGNED,
    TOKEN_KEYWORD_SIZEOF,
    TOKEN_KEYWORD_STATIC,
    TOKEN_KEYWORD_STRUCT,
    TOKEN_KEYWORD_SWITCH,
    TOKEN_KEYWORD_TYPEDEF,
    TOKEN_KEYWORD_UNION,
    TOKEN_KEYWORD_UNSIGNED,
    TOKEN_KEYWORD_VOID,
    TOKEN_KEYWORD_VOLATILE,
    TOKEN_KEYWORD_WHILE,
    TOKEN_KEYWORD_ALIGNAS,
    TOKEN_KEYWORD_ALIGNOF,
    TOKEN_KEYWORD_ATOMIC,
    TOKEN_KEYWORD_BOOL,
    TOKEN_KEYWORD_COMPLEX,
    TOKEN_KEYWORD_GENERIC,
    TOKEN_KEYWORD_IMAGINARY,
    TOKEN_KEYWORD_NORETURN,
    TOKEN_KEYWORD_STATIC_ASSERT,
    TOKEN_KEYWORD_THREAD_LOCAL,
    TOKEN_KEYWORD_FUNC_NAME,

    TOKEN_IDENTIFIER,
    TOKEN_I_CONSTANT,
    TOKEN_F_CONSTANT,
    TOKEN_STRING_LITERAL,

    TOKEN_ELLIPSIS,
    TOKEN_RIGHT_ASSIGN,
    TOKEN_LEFT_ASSIGN,
    TOKEN_ADD_ASSIGN,
    TOKEN_SUB_ASSIGN,
    TOKEN_MUL_ASSIGN,
    TOKEN_DIV_ASSIGN,
    TOKEN_MOD_ASSIGN,
    TOKEN_AND_ASSIGN,
    TOKEN_XOR_ASSIGN,
    TOKEN_OR_ASSIGN,
    TOKEN_RIGHT_OP,
    TOKEN_LEFT_OP,
    TOKEN_INC_OP,
    TOKEN_DEC_OP,
    TOKEN_PTR_OP,
    TOKEN_AND_OP,
    TOKEN_OR_OP,
    TOKEN_LE_OP,
    TOKEN_GE_OP,
    TOKEN_EQ_OP,
    TOKEN_NE_OP,

    TOKEN_SEMICOLON,
    TOKEN_OPEN_BRACE,
    TOKEN_CLOSE_BRACE,
    TOKEN_COMMA,
    TOKEN_COLON,
    TOKEN_EQUAL_SIGN,
    TOKEN_OPEN_PARENTHESIS,
    TOKEN_CLOSE_PARENTHESIS,
    TOKEN_OPEN_BRACKET,
    TOKEN_CLOSE_BRACKET,
    TOKEN_PERIOD,
    TOKEN_AMPERSAND,
    TOKEN_EXCLAMATION_MARK,
    TOKEN_TILDE,
    TOKEN_HYPEN,
    TOKEN_PLUS,
    TOKEN_ASTERICK,
    TOKEN_FORWARD_SLASH,
    TOKEN_PERCENT_SIGN,
    TOKEN_LEFT_ARROW,
    TOKEN_RIGHT_ARROW,
    TOKEN_CARROT,
    TOKEN_PIPE,
    TOKEN_QUESTION_MARK,
} tokentype_t;

struct Token
{
    tokentype_t type;

    const char *src;
    int length;

    const char *file;
    int line;
    int column;
};

void lex_file (const char *filepath,
               lexer_data_t *lexer);
void lex_str (const char *str,
              lexer_data_t *lexer);

void lexer_init (lexer_data_t *lexer);
void lexer_print (const lexer_data_t *lexer);
void lexer_free (lexer_data_t *lexer);

char *token_tostr (token_t *tok);
void token_print (token_t *tok);
